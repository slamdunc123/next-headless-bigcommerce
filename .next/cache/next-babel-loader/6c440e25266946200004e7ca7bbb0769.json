{"ast":null,"code":"import axios from 'axios';\nexport default (async ({\n  query: {\n    id\n  }\n}, res) => {\n  let products = [];\n  await axios({\n    method: \"GET\",\n    url: 'https://api.bigcommerce.com/stores/5xucklva8y/v3/catalog/products',\n    headers: {\n      \"X-Auth-Client\": '4berj6c79aulu1fiqgeq3kupga0oe01',\n      \"X-Auth-Token\": '5xe20syvcw3l4oibycyeoj85ezsvaio'\n    }\n  }).then(response => products = response.data.data).catch(err => console.log);\n  res.status(200).json(products); // const filtered = await products.filter(product => product.id === id)\n  // Product with id exists\n  // if (filtered.length > 0) {\n  //   res.status(200).json(filtered[0])\n  // } else {\n  //   res.status(404).json({ message: `User with id: ${id} not found.` })\n  // }\n});","map":{"version":3,"sources":["/Users/duncan/Development/Repos/next-learn-demo/7.2-api-routes/pages/api/products2/[id].js"],"names":["axios","query","id","res","products","method","url","headers","then","response","data","catch","err","console","log","status","json"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,gBAAe,OAAO;AAAEC,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF;AAAT,CAAP,EAA0BC,GAA1B,KAAkC;AAE/C,MAAIC,QAAQ,GAAG,EAAf;AAEA,QAAMJ,KAAK,CACP;AACEK,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,GAAG,EAAE,mEAFP;AAGIC,IAAAA,OAAO,EAAE;AACP,uBAAiB,iCADV;AAEP,sBAAgB;AAFT;AAHb,GADO,CAAL,CAUDC,IAVC,CAUIC,QAAQ,IAAIL,QAAQ,GAAGK,QAAQ,CAACC,IAAT,CAAcA,IAVzC,EAWDC,KAXC,CAWKC,GAAG,IAAIC,OAAO,CAACC,GAXpB,CAAN;AAaEX,EAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBZ,QAArB,EAjB6C,CAkB7C;AAEF;AACA;AACA;AACA;AACA;AACA;AACD,CA1BD","sourcesContent":["import axios from 'axios'; \n\nexport default async ({ query: { id } }, res) => {\n\n  let products = [];\n\n  await axios(\n      {\n        method: \"GET\",\n        url: 'https://api.bigcommerce.com/stores/5xucklva8y/v3/catalog/products',\n          headers: {\n            \"X-Auth-Client\": '4berj6c79aulu1fiqgeq3kupga0oe01',\n            \"X-Auth-Token\": '5xe20syvcw3l4oibycyeoj85ezsvaio'\n          }\n      }\n      )\n      .then(response => products = response.data.data)\n      .catch(err => console.log);\n  \n    res.status(200).json(products)\n    // const filtered = await products.filter(product => product.id === id)\n\n  // Product with id exists\n  // if (filtered.length > 0) {\n  //   res.status(200).json(filtered[0])\n  // } else {\n  //   res.status(404).json({ message: `User with id: ${id} not found.` })\n  // }\n}"]},"metadata":{},"sourceType":"module"}