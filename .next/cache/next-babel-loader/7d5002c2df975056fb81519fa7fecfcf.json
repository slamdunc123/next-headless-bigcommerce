{"ast":null,"code":"import fetch from 'isomorphic-fetch'; // let products = [\n//   {\n//     id: '387',\n//     name: 'test'\n//   },\n//   {\n//     id: '388',\n//     name: 'test2'\n//   }\n// ]\n\nlet getProductData = async () => {\n  let res = await fetch(`https://api.bigcommerce.com/stores/5xucklva8y/v3/catalog/products/${_id}`, {\n    method: \"GET\",\n    headers: {\n      \"X-Auth-Client\": '4berj6c79aulu1fiqgeq3kupga0oe01',\n      \"X-Auth-Token\": '5xe20syvcw3l4oibycyeoj85ezsvaio'\n    }\n  });\n  const data = await res.json();\n  return {\n    products: data.data\n  };\n};\n\nexport default ((req, res) => {\n  res.status(200).json({\n    products: req.query.id,\n    products\n  });\n}); // export default (req, res) => {\n//   const {\n//     query: { id },\n//   } = req\n//   // res.json(`Product: ${id}`)\n//   res.status(200).json({products: req.query.id, products})\n// }\n// export default ({ query: { id } }, res) => {\n//     const filtered = products.filter(product => product.id === id)\n//   // Product with id exists\n//   if (filtered.length > 0) {\n//     res.status(200).json(filtered[0])\n//   } else {\n//     res.status(404).json({ message: `User with id: ${id} not found.` })\n//   }\n// }","map":{"version":3,"sources":["/Users/duncan/Development/Repos/next-learn-demo/7.2-api-routes/pages/api/products/[id].js"],"names":["fetch","getProductData","res","_id","method","headers","data","json","products","req","status","query","id"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,IAAIC,cAAc,GAAG,YAAY;AAC/B,MAAIC,GAAG,GAAG,MAAMF,KAAK,CAAE,qEAAoEG,GAAI,EAA1E,EACrB;AACEC,IAAAA,MAAM,EAAE,KADV;AAEIC,IAAAA,OAAO,EAAE;AACP,uBAAiB,iCADV;AAEP,sBAAgB;AAFT;AAFb,GADqB,CAArB;AASA,QAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;AAEE,SAAO;AACLC,IAAAA,QAAQ,EAAEF,IAAI,CAACA;AADV,GAAP;AAID,CAhBH;;AAsBA,gBAAe,CAACG,GAAD,EAAMP,GAAN,KAAc;AAC3BA,EAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAACC,IAAAA,QAAQ,EAAEC,GAAG,CAACE,KAAJ,CAAUC,EAArB;AAAyBJ,IAAAA;AAAzB,GAArB;AACD,CAFD,E,CAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import fetch from 'isomorphic-fetch'\n\n// let products = [\n//   {\n//     id: '387',\n//     name: 'test'\n//   },\n//   {\n//     id: '388',\n//     name: 'test2'\n//   }\n\n// ]\nlet getProductData = async () => {\n  let res = await fetch(`https://api.bigcommerce.com/stores/5xucklva8y/v3/catalog/products/${_id}`,\n  {\n    method: \"GET\",\n      headers: {\n        \"X-Auth-Client\": '4berj6c79aulu1fiqgeq3kupga0oe01',\n        \"X-Auth-Token\": '5xe20syvcw3l4oibycyeoj85ezsvaio'\n      }\n  }\n  )\n  const data = await res.json()\n \n    return {\n      products: data.data\n    }\n    \n  }\n  \n\n\n\n\nexport default (req, res) => {\n  res.status(200).json({products: req.query.id, products})\n}\n\n// export default (req, res) => {\n//   const {\n//     query: { id },\n//   } = req\n\n//   // res.json(`Product: ${id}`)\n//   res.status(200).json({products: req.query.id, products})\n// }\n\n// export default ({ query: { id } }, res) => {\n  \n  \n//     const filtered = products.filter(product => product.id === id)\n\n//   // Product with id exists\n//   if (filtered.length > 0) {\n//     res.status(200).json(filtered[0])\n//   } else {\n//     res.status(404).json({ message: `User with id: ${id} not found.` })\n//   }\n// }"]},"metadata":{},"sourceType":"module"}