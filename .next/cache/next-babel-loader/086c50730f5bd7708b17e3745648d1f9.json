{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nlet products = [{\n  id: '387',\n  name: 'test'\n}, {\n  id: '388',\n  name: 'test2'\n}]; // let products = fetch(`https://api.bigcommerce.com/stores/5xucklva8y/v3/catalog/products`,\n// {\n//   method: \"GET\",\n//     headers: {\n//       \"X-Auth-Client\": '4berj6c79aulu1fiqgeq3kupga0oe01',\n//       \"X-Auth-Token\": '5xe20syvcw3l4oibycyeoj85ezsvaio'\n//     }\n// }\n// )\n// .then(response => response.json())\n// .then(data => {\n//   return products = data.data\n// }\n// )\n// export default (req, res) => {\n//   res.status(200).json({products: req.query.id, products})\n// }\n// export default (req, res) => {\n//   const {\n//     query: { id },\n//   } = req\n//   // res.json(`Product: ${id}`)\n//   res.status(200).json({products: req.query.id, products})\n// }\n\nexport default (({\n  query: {\n    id\n  }\n}, res) => {\n  const filtered = products.filter(product => product.id === id); // Product with id exists\n\n  if (filtered.length > 0) {\n    res.status(200).json(filtered[0]);\n  } else {\n    res.status(404).json({\n      message: `User with id: ${id} not found.`\n    });\n  }\n});","map":{"version":3,"sources":["/Users/duncan/Development/Repos/next-learn-demo/7.2-api-routes/pages/api/products/[id].js"],"names":["fetch","products","id","name","query","res","filtered","filter","product","length","status","json","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AAEA,IAAIC,QAAQ,GAAG,CACb;AACEC,EAAAA,EAAE,EAAE,KADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CADa,EAKb;AACED,EAAAA,EAAE,EAAE,KADN;AAEEC,EAAAA,IAAI,EAAE;AAFR,CALa,CAAf,C,CAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,gBAAe,CAAC;AAAEC,EAAAA,KAAK,EAAE;AAAEF,IAAAA;AAAF;AAAT,CAAD,EAAoBG,GAApB,KAA4B;AACzC,QAAMC,QAAQ,GAAGL,QAAQ,CAACM,MAAT,CAAgBC,OAAO,IAAIA,OAAO,CAACN,EAAR,KAAeA,EAA1C,CAAjB,CADyC,CAGzC;;AACA,MAAII,QAAQ,CAACG,MAAT,GAAkB,CAAtB,EAAyB;AACvBJ,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBL,QAAQ,CAAC,CAAD,CAA7B;AACD,GAFD,MAEO;AACLD,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAG,iBAAgBV,EAAG;AAA/B,KAArB;AACD;AACF,CATD","sourcesContent":["import fetch from 'isomorphic-fetch'\n\nlet products = [\n  {\n    id: '387',\n    name: 'test'\n  },\n  {\n    id: '388',\n    name: 'test2'\n  }\n\n]\n\n// let products = fetch(`https://api.bigcommerce.com/stores/5xucklva8y/v3/catalog/products`,\n// {\n//   method: \"GET\",\n//     headers: {\n//       \"X-Auth-Client\": '4berj6c79aulu1fiqgeq3kupga0oe01',\n//       \"X-Auth-Token\": '5xe20syvcw3l4oibycyeoj85ezsvaio'\n//     }\n// }\n// )\n// .then(response => response.json())\n// .then(data => {\n//   return products = data.data\n// }\n// )\n\n// export default (req, res) => {\n//   res.status(200).json({products: req.query.id, products})\n// }\n\n// export default (req, res) => {\n//   const {\n//     query: { id },\n//   } = req\n\n//   // res.json(`Product: ${id}`)\n//   res.status(200).json({products: req.query.id, products})\n// }\n\nexport default ({ query: { id } }, res) => {\n  const filtered = products.filter(product => product.id === id)\n\n  // Product with id exists\n  if (filtered.length > 0) {\n    res.status(200).json(filtered[0])\n  } else {\n    res.status(404).json({ message: `User with id: ${id} not found.` })\n  }\n}"]},"metadata":{},"sourceType":"module"}