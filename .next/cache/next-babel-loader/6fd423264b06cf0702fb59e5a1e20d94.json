{"ast":null,"code":"import fetch from 'isomorphic-fetch'; // let products = [\n//   {\n//     id: '387',\n//     name: 'test'\n//   },\n//   {\n//     id: '388',\n//     name: 'test2'\n//   }\n// ]\n// let getProductData = async () => {\n//   let res = await fetch(`https://api.bigcommerce.com/stores/5xucklva8y/v3/catalog/products/${_id}`,\n//   {\n//     method: \"GET\",\n//       headers: {\n//         \"X-Auth-Client\": '4berj6c79aulu1fiqgeq3kupga0oe01',\n//         \"X-Auth-Token\": '5xe20syvcw3l4oibycyeoj85ezsvaio'\n//       }\n//   }\n//   )\n//   const data = await res.json()\n//     return {\n//       products: data.data\n//     }\n//   }\n// export default (req, res) => {\n//   res.status(200).json({product: req.query.id, products})\n// }\n// export default (req, res) => {\n//   const {\n//     query: { id },\n//   } = req\n//   // res.json(`Product: ${id}`)\n//   res.status(200).json({products: req.query.id, products})\n// }\n\nexport default (({\n  query: {\n    id\n  }\n}, res) => {\n  const filtered = products.filter(product => product.id === id); // Product with id exists\n\n  if (filtered.length > 0) {\n    res.status(200).json(filtered[0]);\n  } else {\n    res.status(404).json({\n      message: `User with id: ${id} not found.`\n    });\n  }\n});","map":{"version":3,"sources":["/Users/duncan/Development/Repos/next-learn-demo/7.2-api-routes/pages/api/products/[id].js"],"names":["fetch","query","id","res","filtered","products","filter","product","length","status","json","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,gBAAe,CAAC;AAAEC,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF;AAAT,CAAD,EAAoBC,GAApB,KAA4B;AAGvC,QAAMC,QAAQ,GAAGC,QAAQ,CAACC,MAAT,CAAgBC,OAAO,IAAIA,OAAO,CAACL,EAAR,KAAeA,EAA1C,CAAjB,CAHuC,CAKzC;;AACA,MAAIE,QAAQ,CAACI,MAAT,GAAkB,CAAtB,EAAyB;AACvBL,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBN,QAAQ,CAAC,CAAD,CAA7B;AACD,GAFD,MAEO;AACLD,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAG,iBAAgBT,EAAG;AAA/B,KAArB;AACD;AACF,CAXD","sourcesContent":["import fetch from 'isomorphic-fetch'\n\n// let products = [\n//   {\n//     id: '387',\n//     name: 'test'\n//   },\n//   {\n//     id: '388',\n//     name: 'test2'\n//   }\n\n// ]\n// let getProductData = async () => {\n//   let res = await fetch(`https://api.bigcommerce.com/stores/5xucklva8y/v3/catalog/products/${_id}`,\n//   {\n//     method: \"GET\",\n//       headers: {\n//         \"X-Auth-Client\": '4berj6c79aulu1fiqgeq3kupga0oe01',\n//         \"X-Auth-Token\": '5xe20syvcw3l4oibycyeoj85ezsvaio'\n//       }\n//   }\n//   )\n//   const data = await res.json()\n \n//     return {\n//       products: data.data\n//     }\n    \n//   }\n  \n\n\n\n\n// export default (req, res) => {\n//   res.status(200).json({product: req.query.id, products})\n// }\n\n// export default (req, res) => {\n//   const {\n//     query: { id },\n//   } = req\n\n//   // res.json(`Product: ${id}`)\n//   res.status(200).json({products: req.query.id, products})\n// }\n\nexport default ({ query: { id } }, res) => {\n  \n  \n    const filtered = products.filter(product => product.id === id)\n\n  // Product with id exists\n  if (filtered.length > 0) {\n    res.status(200).json(filtered[0])\n  } else {\n    res.status(404).json({ message: `User with id: ${id} not found.` })\n  }\n}"]},"metadata":{},"sourceType":"module"}