{"ast":null,"code":"import fetch from 'isomorphic-fetch'; // let products = [\n//   {\n//     id: '387',\n//     name: 'test'\n//   },\n//   {\n//     id: '388',\n//     name: 'test2'\n//   }\n// ]\n// let getProductData = async () => {\n//   let res = await fetch(`https://api.bigcommerce.com/stores/5xucklva8y/v3/catalog/products/${_id}`,\n//   {\n//     method: \"GET\",\n//       headers: {\n//         \"X-Auth-Client\": '4berj6c79aulu1fiqgeq3kupga0oe01',\n//         \"X-Auth-Token\": '5xe20syvcw3l4oibycyeoj85ezsvaio'\n//       }\n//   }\n//   )\n//   const data = await res.json()\n//     return {\n//       products: data.data\n//     }\n//   }\n// export default (req, res) => {\n//   res.status(200).json({product: req.query.id, products})\n// }\n\nexport default ((req, res) => {\n  const {\n    query: {\n      id\n    }\n  } = req; // res.json(`Product: ${id}`)\n\n  res.status(200).json({\n    products: req.query.id,\n    products\n  });\n}); // export default ({ query: { id } }, res) => {\n//     const filtered = products.filter(product => product.id === id)\n//   // Product with id exists\n//   if (filtered.length > 0) {\n//     res.status(200).json(filtered[0])\n//   } else {\n//     res.status(404).json({ message: `User with id: ${id} not found.` })\n//   }\n// }","map":{"version":3,"sources":["/Users/duncan/Development/Repos/next-learn-demo/7.2-api-routes/pages/api/products/[id].js"],"names":["fetch","req","res","query","id","status","json","products"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AACA;;AAEA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC3B,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AADH,MAEFH,GAFJ,CAD2B,CAK3B;;AACAC,EAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,IAAAA,QAAQ,EAAEN,GAAG,CAACE,KAAJ,CAAUC,EAArB;AAAyBG,IAAAA;AAAzB,GAArB;AACD,CAPD,E,CASA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import fetch from 'isomorphic-fetch'\n\n// let products = [\n//   {\n//     id: '387',\n//     name: 'test'\n//   },\n//   {\n//     id: '388',\n//     name: 'test2'\n//   }\n\n// ]\n// let getProductData = async () => {\n//   let res = await fetch(`https://api.bigcommerce.com/stores/5xucklva8y/v3/catalog/products/${_id}`,\n//   {\n//     method: \"GET\",\n//       headers: {\n//         \"X-Auth-Client\": '4berj6c79aulu1fiqgeq3kupga0oe01',\n//         \"X-Auth-Token\": '5xe20syvcw3l4oibycyeoj85ezsvaio'\n//       }\n//   }\n//   )\n//   const data = await res.json()\n \n//     return {\n//       products: data.data\n//     }\n    \n//   }\n  \n\n\n\n\n// export default (req, res) => {\n//   res.status(200).json({product: req.query.id, products})\n// }\n\nexport default (req, res) => {\n  const {\n    query: { id },\n  } = req\n\n  // res.json(`Product: ${id}`)\n  res.status(200).json({products: req.query.id, products})\n}\n\n// export default ({ query: { id } }, res) => {\n  \n  \n//     const filtered = products.filter(product => product.id === id)\n\n//   // Product with id exists\n//   if (filtered.length > 0) {\n//     res.status(200).json(filtered[0])\n//   } else {\n//     res.status(404).json({ message: `User with id: ${id} not found.` })\n//   }\n// }"]},"metadata":{},"sourceType":"module"}